permutation and combination 
input = [1, 2, 3, 4]
output = 
	1 (3) (2) (1) -- ok
	2 - 6
	3 - 6
	4 - 6
	
	1 - 2 3 4
	1 - 2 4 3
	1 - 3 2 4
	1 - 3 4 2
	1 - 4 2 3
	1 - 4 3 2

(2, 3, 4)
	1 aside
	1 + 3 permutations

	2 aside
	2 + (1,3,4) permutations

	3 aside
	3 + (1,2,4) permutations

	4 aside
	4 + (1,2,3) perms

3 digit permutations

	(2,3,4)
		2 - 3 4
		2 - 4 3
		(3,4) perms
		

		3 2 4
		3 4 2
		(2,4) perms

		4 2 3
		4 3 2
		(2,3) perms

2 digits permutations
	(3,4)
		3 4
		4 permutation

		4 3
		3 permutations


fun(list)
	if(length of list == 1)
		return digit in list
	for each digit in list
		digit + fun(list-digit)
		1     + fun(list-[1] = [2,3,4])

def perm(list) :
	if len(list) == 1 :
		print(list[0])
	for i in list :
		print(i + perm(list - i), end=" ")
	


--------------------------------------------------------------------------------------------

gfgfgfgf
01234567

g - f - break, g, f, g, f, g, f
gf - gf (2,3), gf(4,5), gf(6,7)

split the given string into substrings such that the substrings are equal and of minimum length

TODO: the same for maximum length

repetition of sub-strings in to list
The original string is : gfggfggfggfggfggfggfggfg
final output string is : ['gfg', 'gfg', 'gfg', 'gfg', 'gfg', 'gfg', 'gfg', 'gfg']

str
length - 1 repeats or not? - execution break, substr list such that substrs concatenation = given string
length - 2
length - 3
..
length - len(given string)

xxxx
/*for i in range(1, len(str)) :
	substr = str[:i]
	for j in range(i+1, */
xxxx


string[:1] - g - test
string[:2] - gf - test
string[:3] - gfg- test
 gfgg

g - 1
given string - 21
n = len(givenstr) // len(substr)
n = 21 // 1 = 21
substr = substr * n
'ggggggggggggggggggggg'

gf
n = 21 // 2 = 10
'gfgfgfgfgfgfgfgfgfgf'
reject

gfg
n = 21 // 3 = 7
'gfggfggfggfggfggfggfg'

return ['gfg'] * n




------------------------------------------------------------------------------------------


diamond star pattern
 
		*
       * *
      * * *
     * * * *
    * * * * *
    * * * * *
     * * * *
      * * *
       * *
        *
		
		


      *
	 **
	*** 
	
	
	
	1
	12
	123
	1234
	12345
	
	
	
	1
	13
	135
	1357
	13579
	
	
		1
	  1 2 1
	 1 2 3 1
	1 2 3 4 1
   1 2 3 4 5 1
   
   
   
   
   
	  
	
	
	
	


